"""
Django settings for HalkiesTalkies project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from django.core.management.utils import get_random_secret_key
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v^p!)_*!_^#!6#qa@9lqa_w%y8w$wnxn+$r%8+f2s=hh_qx^%('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['139.162.189.203', '0.0.0.0', '127.0.0.1', 'chat_app']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat',
    'rest_framework',
    'channels',
    'channels_redis',
]

from django.middleware.csrf import CsrfViewMiddleware
from django.utils.functional import SimpleLazyObject
from django.conf import settings

"""class ExcludeWebSocketFromCSRFMiddleware(CsrfViewMiddleware):
    def _accepts_websocket(self, request):
        return request.META.get('HTTP_CONNECTION', '').lower() == 'upgrade' and \
               request.META.get('HTTP_UPGRADE', '').lower() == 'websocket'

    def process_view(self, request, callback, callback_args, callback_kwargs):
        if self._accepts_websocket(request):
            # Skip CSRF check for WebSocket connections
            return None
        return super().process_view(request, callback, callback_args, callback_kwargs)

def get_websocket_path():
    return WEBSOCKET_URL_PREFIX

websocket_path = SimpleLazyObject(get_websocket_path)
print("websocket_path: ", websocket_path)"""

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'HalkiesTalkies.urls'

WEBSOCKET_URL_PREFIX = '/ws/'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HalkiesTalkies.wsgi.application'
ASGI_APPLICATION = 'HalkiesTalkies.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME', 'halkiestalkies_db'),
        'USER': os.environ.get('POSTGRES_USER', 'halkiestalkies_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'halkiestalkies_pass'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = '/static/'

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Simple JWT auth

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'username',
    'USER_ID_CLAIM': 'user_id',
}

REDIS_HOST = env.str('REDIS_HOST', 'redis')
REDIS_PORT = env.str('REDIS_PORT', '6379')
REDIS_SLOT = env.str('REDIS_SLOT', '0')
REDIS_PASSWORD = env.str('REDIS_PASSWORD', None)
REDIS_USER = env.str('REDIS_USER', None)

if REDIS_USER:
    REDIS_USER = REDIS_USER + '@'
else:
    REDIS_USER = ''
REDIS_CHANNELS_SLOT = env.str('REDIS_CHANNELS_SLOT', '1')

REDIS_URL = f'redis://{REDIS_USER}{REDIS_HOST}:{REDIS_PORT}/{REDIS_SLOT}'

REDIS_OPTIONS = {
    'PASSWORD': REDIS_PASSWORD
}



CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': [REDIS_URL],
        'OPTIONS': REDIS_OPTIONS
    },
}

if REDIS_PASSWORD:
    REDIS_PASSWORD = ':' + REDIS_PASSWORD + '@'
    REDIS_USER = env.str('REDIS_USER', '')
else:
    REDIS_PASSWORD = ''

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [f'redis://{REDIS_USER}{REDIS_PASSWORD}{REDIS_HOST}:{REDIS_PORT}/{REDIS_CHANNELS_SLOT}'],
        },
    },
}
